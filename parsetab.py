
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DO ENDDO ENDWHILE EQUALS ID INT LPAREN NUMBER PLUS RPAREN SEMICOLON TIMES WHILEprograma : declaraciones DO bloque ENDDO WHILE LPAREN condicion RPAREN ENDWHILEdeclaraciones : declaraciones declaracion\n                     | declaraciondeclaracion : INT ID ASSIGN NUMBER SEMICOLONbloque : bloque sentencia\n              | sentenciasentencia : ID ASSIGN expresion SEMICOLONexpresion : termino\n                 | termino PLUS terminotermino : factor\n               | factor TIMES factorfactor : NUMBER\n              | IDcondicion : tipo ID EQUALS NUMBER\n                 | ID EQUALS NUMBERtipo : INT'
    
_lr_action_items = {'INT':([0,2,3,6,22,23,],[4,4,-3,-2,-4,30,]),'$end':([1,36,],[0,-1,]),'DO':([2,3,6,22,],[5,-3,-2,-4,]),'ID':([4,5,8,9,13,14,23,24,25,26,28,30,],[7,10,10,-6,-5,17,29,-7,17,17,34,-16,]),'ASSIGN':([7,10,],[11,14,]),'ENDDO':([8,9,13,24,],[12,-6,-5,-7,]),'NUMBER':([11,14,25,26,35,37,],[15,21,21,21,38,39,]),'WHILE':([12,],[16,]),'SEMICOLON':([15,17,18,19,20,21,31,32,],[22,-13,24,-8,-10,-12,-9,-11,]),'LPAREN':([16,],[23,]),'TIMES':([17,20,21,],[-13,26,-12,]),'PLUS':([17,19,20,21,32,],[-13,25,-10,-12,-11,]),'RPAREN':([27,38,39,],[33,-15,-14,]),'EQUALS':([29,34,],[35,37,]),'ENDWHILE':([33,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaraciones':([0,],[2,]),'declaracion':([0,2,],[3,6,]),'bloque':([5,],[8,]),'sentencia':([5,8,],[9,13,]),'expresion':([14,],[18,]),'termino':([14,25,],[19,31,]),'factor':([14,25,26,],[20,20,32,]),'condicion':([23,],[27,]),'tipo':([23,],[28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> declaraciones DO bloque ENDDO WHILE LPAREN condicion RPAREN ENDWHILE','programa',9,'p_programa','examen2.py',50),
  ('declaraciones -> declaraciones declaracion','declaraciones',2,'p_declaraciones','examen2.py',54),
  ('declaraciones -> declaracion','declaraciones',1,'p_declaraciones','examen2.py',55),
  ('declaracion -> INT ID ASSIGN NUMBER SEMICOLON','declaracion',5,'p_declaracion','examen2.py',62),
  ('bloque -> bloque sentencia','bloque',2,'p_bloque','examen2.py',70),
  ('bloque -> sentencia','bloque',1,'p_bloque','examen2.py',71),
  ('sentencia -> ID ASSIGN expresion SEMICOLON','sentencia',4,'p_sentencia','examen2.py',78),
  ('expresion -> termino','expresion',1,'p_expresion','examen2.py',84),
  ('expresion -> termino PLUS termino','expresion',3,'p_expresion','examen2.py',85),
  ('termino -> factor','termino',1,'p_termino','examen2.py',92),
  ('termino -> factor TIMES factor','termino',3,'p_termino','examen2.py',93),
  ('factor -> NUMBER','factor',1,'p_factor','examen2.py',100),
  ('factor -> ID','factor',1,'p_factor','examen2.py',101),
  ('condicion -> tipo ID EQUALS NUMBER','condicion',4,'p_condicion','examen2.py',107),
  ('condicion -> ID EQUALS NUMBER','condicion',3,'p_condicion','examen2.py',108),
  ('tipo -> INT','tipo',1,'p_tipo','examen2.py',120),
]
